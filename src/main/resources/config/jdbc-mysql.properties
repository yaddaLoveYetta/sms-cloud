##连接设置
#链接驱动陈程序
jdbc.driverClass=com.mysql.jdbc.Driver
# maven resource中根据构建环境动态指定${}参数
jdbc.jdbcUrl=jdbc:mysql://127.0.0.1:3306/hrp-sms?useUnicode\=true&characterEncoding\=UTF-8&zeroDateTimeBehavior\=convertToNull
jdbc.user=root
#jdbc.password=775885
jdbc.password=root

#<!--连接池中保留的最大连接数。默认值: 15 -->
jdbc.maxActive=20
#<!-- 连接池中保留的最小连接数，默认为：3-->
jdbc.minIdle=5
#<!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
jdbc.initialSize=10
#<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->
jdbc.maxWait=6000
#有些数据库连接的时候有超时限制（MySQL连接在8小时后断开），或者由于网络中断等原因，连接池的连接会出现失效的情况，
#这时候可以设置一个testWhileIdle参数为true， 如果检测到当前连接不活跃的时间超过了timeBetweenEvictionRunsMillis，
#则去手动检测一下当前连接的有效性，在保证确实有效后才加以使用。
#在检测活跃性时，如果当前的活跃时间大于minEvictableIdleTimeMillis，则认为需要关闭当前连接。
#当然，为了保证绝对的可用性，你也可以使用testOnBorrow为true（即在每次获取Connection对象时都检测其可用性），不过这样会影响性能。
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒（3600000:为1小时）
jdbc.timeBetweenEvictionRunsMillis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒(300000:为5小时)
#Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接。
jdbc.minEvictableIdleTimeMillis=300000
#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，
#执行validationQuery检测连接是否有效。建议配置为true，不影响性能，并且保证安全性
jdbc.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。缺省值:true
jdbc.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。缺省值:false
jdbc.testOnReturn=false
#druid检测连接存活sql
jdbc.validationQuery=SELECT 1 FROM t_sms_validation
#打开PSCache，并且指定每个连接上PSCache的大小
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，
#比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。缺省值:false
jdbc.poolPreparedStatements=true
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
#在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
jdbc.maxPoolPreparedStatementPerConnectionSize=20
#对于建立连接过长的连接强制关闭
jdbc.removeAbandoned="true"
#如果连接建立时间超过了30分钟，则强制将其关闭,单位秒
jdbc.removeAbandonedTimeout=1800
#关闭abanded连接时输出错误日志
jdbc.logAbandoned=true



