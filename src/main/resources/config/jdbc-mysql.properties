##连接设置
#jdbc.driverClassName=com.mysql.jdbc.Driver
#jdbc.url=jdbc:mysql://localhost:3306/yadda_study
#jdbc.username=root
#jdbc.password=775885
##<!-- 初始化连接 -->
#jdbc.initialSize=2
##最大连接数量
#jdbc.maxActive=20
##<!-- 最大空闲连接 -->
#jdbc.maxIdle=10
##<!-- 最小空闲连接 -->
#jdbc.minIdle=5
##<!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 -->
#jdbc.maxWait=60000
##JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] 
##注意："user" 与 "password" 两个属性会被明确地传递，因此这里不需要包含他们。
#jdbc.connectionProperties=useUnicode=true;characterEncoding=utf-8
##指定由连接池所创建的连接的自动提交（auto-commit）状态。
#jdbc.defaultAutoCommit=false
##driver default 指定由连接池所创建的连接的只读（read-only）状态。
##如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）
#jdbc.defaultReadOnly=
##driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。
##可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE
#jdbc.defaultTransactionIsolation=READ_UNCOMMITTED

#<!--c3p0连接池相关配置-->
#链接驱动陈程序
jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.jdbcUrl = jdbc:mysql://127.0.0.1:3306/hrp-sms?useUnicode\=true&characterEncoding\=UTF-8&zeroDateTimeBehavior\=convertToNull
jdbc.user = root
jdbc.password =
#<!--连接池中保留的最大连接数。默认值: 15 -->  
jdbc.maxPoolSize=10
#<!-- 连接池中保留的最小连接数，默认为：3-->  
jdbc.minPoolSize=2
#<!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3--> 
jdbc.initialPoolSize=3
#<!--最大空闲时间，25000秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->  
jdbc.maxIdleTime=25000
#<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->   
jdbc.checkoutTimeout=6000
#<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 --> 
jdbc.acquireIncrement=5
#<!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->  
jdbc.acquireRetryAttempts=30
#<!--重新尝试的时间间隔，默认为：1000毫秒-->   
jdbc.acquireRetryDelay=1000
#<!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->  
jdbc.autoCommitOnClose=false
#<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null -->
#<!-- automaticTestTable maked error: CLOSE BY CLIENT STACK TRACE -->  
#获取connnection时测试是否有效
jdbc.testConnectionOnCheckin = true
jdbc.testConnectionOnCheckout = true
jdbc.automaticTestTable=C3P0TestTable
#<!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false--> 
jdbc.breakAfterAcquireFailure=false
#<!--每18000秒检查所有连接池中的空闲连接。默认值: 0，不检查 --> 
jdbc.idleConnectionTestPeriod=18000
#<!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0-->
jdbc.maxStatements=100
#<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 --> 
jdbc.maxStatementsPerConnection=20
#<!--为0的时候要求所有的Connection在应用程序中必须关闭。如果不为0，则强制在设定的时间到达后回收Connection,默认值 0单位 秒 -->
jdbc.unreturnedConnectionTimeout=60
#<!--配置连接的生存时间，超过这个时间的连接将由连接池自动断开丢弃掉。当然正在使用的连接不会马上断开，而是等待它close再断开。配置为0的时候则不会对连接的生存时间进行限制,默认值 0单位 秒 -->
jdbc.maxIdleTimeExcessConnections=60
#<!--秒，有效生存时间。一个比maxconnectionage就从池中移除，从池中清除旧的连接。这不同于maxidletime，它指的是绝对年龄。当前存在的链接超过了maxconnectionage值就从池中删掉，不管当前的链接数量是否充足，0表示永久有效 ，默认0 -->
jdbc.maxConnectionAge=60
#druid检测连接存活sql
jdbc.validationQuery=SELECT 1 FROM C3P0TestTable

#-- old configuration
#c3p0.driverClass=com.mysql.jdbc.Driver
#c3p0.jdbcUrl = jdbc:mysql://localhost:3306/parknor?useUnicode\=true&characterEncoding\=UTF-8
#c3p0.user = root
#c3p0.password =123456
#c3p0.miniPoolSize = 10
#c3p0.maxPoolSize = 1000
#c3p0.initialPoolSize = 5
#c3p0.maxIdleTime = 25000
#c3p0.acquireIncrement = 1
#c3p0.unreturnedConnectionTimeout=25
#c3p0.acquireRetryAttempts = 30
#c3p0.acquireRetryDelay = 1000
#c3p0.testConnectionOnCheckin = true
#c3p0.automaticTestTable = c3p0TestTable
#c3p0.idleConnectionTestPeriod = 18000
#c3p0.checkoutTimeout=3000
#c3p0.maxIdleTimeExcessConnections=20
#c3p0.maxConnectionAge=20 


